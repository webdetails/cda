<!--===========================================================================
  This is the build file for the Community Dashboard Framework Plugin project.

  This build file will use the common_build.xml file as the default build
  process and should only override the tasks that need to differ from
  the common build file.

  See common_build.xml for more details
============================================================================-->
<project name="Community Data Access" basedir="." default="jar"
         xmlns:ivy="antlib:org.apache.ivy.ant">

  <description>
    This build file is used to create the CDA project
  </description>


  <property file="../override.properties"
            description="Top level Properties customized for your development environment belong in this file.  This file will never be checked into the SCM." />
  <property file="../build.properties"
            description="Top level Properties customized for your particular project belong in this file." />


  <!-- Import subfloor.xml which contains all the default tasks -->
  <import file="../build-res/subfloor.xml"/>

  <!--
      DON'T OVERRIDE SUBFLOOR UNLESS YOU HAVE TO
      Comment why when you do so
    -->
  <property name="plugin.name"
            value="cda"
            description="Name of the plugin"/>

  <property name="base.resource.dir"
	    value="../cda-pentaho-base/resources"
            description="Name of the resource directory for base"/>
  <property name="resource.dir"
            value="resources"
            description="Name of the resource directory"/>

  <property name="stage.dir"
            value="${bin.dir}/stage"
            description="Name of the resource directory"/>

  <property name="samples.stage.dir"
            value="${bin.dir}/stage-samples"
            description="Name of the resource directory" />
  <property name="runtimelib.dir"
            value="${basedir}/runtime-lib"
            description="Directory that hosts Jar files required to run project source.  (IVY will populate this directory with required jars)" />

  <property name="basesrc.dir"
            value="../cda-pentaho-base/src"
            description="shared source for both pentaho layers"/>

  <echo> project.revision = ${project.revision}</echo>

  <target name="dist" depends="clean,resolve,jar,test,dist-plugin,dist-samples"/>
  <target name="dist-compile" depends="jar,dist-plugin"/>

  <property name="plugin.artifact.id" value="${plugin.name}"/>
  <property name="plugin.zipfile" value="${plugin.artifact.id}-${project.revision}.zip"/>
  <property name="plugin.disabled.zipfile" value="${plugin.artifact.id}-disabled-${project.revision}.zip"/>  
  <property name="plugin.samples.zipfile" value="${plugin.artifact.id}-samples-${project.revision}.zip"/>
  <property name="plugin.solution.zipfile" value="${plugin.artifact.id}-solution-${project.revision}.zip"/>



 <!-- Define the Sonar task if this hasn't been done in a common script -->
  <taskdef uri="antlib:org.sonar.ant" resource="org/sonar/ant/antlib.xml">
    <classpath path="sonar-ant-task-1.3.jar" />
  </taskdef>

    <!--=======================================================================
      compile.compile : overridden for

      Performs the actual compile
      ====================================================================-->
  <target name="compile.compile" depends="init" description="Performs the actual javac compile">
    <javac destdir="${classes.dir}"
           debug="${javac.debug}"
           deprecation="${javac.deprecation}"
           fork="true"
           memorymaximumsize="${javac.maxmemory}"
           source="${javac.source}"
           target="${javac.target}">
      <classpath>
        <path refid="classpath"/>
        <fileset dir="runtime-lib">
          <include name="**/*.jar" />
        </fileset>
      </classpath>
      <src path="${src.dir}"/>
      <src path="${basesrc.dir}"/>
    </javac>
  </target>


  <!-- Overriding resolve target so we can add resolve-runtime -->
  <target name="resolve"
          depends="resolve-default, resolve-test, resolve-runtime, ivy.check-releasable"
          description="Retrieves all the dependent libraries" />


  <target name="resolve-runtime" depends="resolve-init">
    <ivy:resolve file="ivy.xml" conf="runtime" />
    <ivy:retrieve conf="runtime" pattern="${runtimelib.dir}/[module]-[revision](-[classifier]).[ext]" />
  </target>



  <!--=======================================================================
              dist

              Creates a distribution of this project's plugin zip
              ====================================================================-->
  <target name="dist-plugin" depends="jar" description="Creates a distribution">

    <!-- delete and re-create the plugin dist folder tree -->
    <mkdir dir="${stage.dir}"/>
    <mkdir dir="${stage.dir}/${plugin.name}"/>
    <mkdir dir="${stage.dir}/${plugin.name}/lib"/>

    <!-- copy the plugin jar to the plugin dist lib folder -->
    <copy todir="${stage.dir}/${plugin.name}/lib" overwrite="true">
      <fileset dir="${dist.dir}">
        <include name="${ivy.artifact.id}-${project.revision}.jar"/>
      </fileset>
      <fileset dir="${devlib.dir}">
        <include name="**/*.jar"/>
      </fileset>
      <fileset dir="${runtimelib.dir}">
        <include name="**/*.jar"/>
        <exclude name="**/batik-js-1.7.jar"/>
      </fileset>
    </copy>

    <copy todir="${stage.dir}/${plugin.name}" overwrite="true">
      <fileset dir="${base.resource.dir}">
        <include name="**/*"/>
      </fileset>
    </copy>
    <!-- Copy the plugin.xml and any other files from the resource dir -->
    <copy todir="${stage.dir}/${plugin.name}" overwrite="true">
      <fileset dir="${resource.dir}">
        <include name="**/*"/>
      </fileset>
    </copy>

    <copy todir="${stage.dir}/${plugin.name}" overwrite="true">
      <fileset dir="${basedir}">
        <include name="readme.txt"/>
      </fileset>
    </copy>

    <!-- set DSTAMP -->
    <tstamp/>
    <!-- create the version file -->
    <property name="sequential.build.id" value="manual-${DSTAMP}"/>

    <echo file="${stage.dir}/${plugin.name}/version.xml" message="&lt;version branch='${project.stage}'  buildId='${sequential.build.id}'>${project.revision}&lt;/version>"/>

    <replace file="${stage.dir}/${plugin.name}/cachemanager/cache.html" token="@@VERSION@@" value="${project.revision}"/>
    <replace file="${stage.dir}/${plugin.name}/static/about.html" token="@@VERSION@@" value="${project.revision}"/>

    <!-- create a zip file -->
    <zip zipfile="${dist.dir}/${plugin.zipfile}"
         basedir="${stage.dir}"
         includes="cda/**/*"
         excludes="**/Thumbs.db"/>


        <copy todir="${stage.dir}/${plugin.name}-disabled/${plugin.name}" overwrite="true">
            <fileset dir="${stage.dir}/${plugin.name}"/>
        </copy>

        <copy file="${stage.dir}/${plugin.name}-disabled/${plugin.name}/plugin.xml.disabled" 
              tofile="${stage.dir}/${plugin.name}-disabled/${plugin.name}/plugin.xml" overwrite="true"/>


        <!-- create a zip file -->
        <zip zipfile="${dist.dir}/${plugin.disabled.zipfile}"
             basedir="${stage.dir}/${plugin.name}-disabled"
             includes="${plugin.artifact.id}/**/*"
             excludes="**/Thumbs.db"/>


    <echo file="${dist.dir}/marketplace.xml">      &lt;version&gt;
        &lt;branch&gt;${project.stage}&lt;/branch&gt;
        &lt;version&gt;${project.revision}&lt;/version&gt;
        &lt;name&gt;${marketplace.metadata.name}&lt;/name&gt;
        &lt;package_url&gt;
          ${marketplace.metadata.package_url}
        &lt;/package_url&gt;
        &lt;samples_url&gt;
          ${marketplace.metadata.samples_url}
        &lt;/samples_url&gt;
        &lt;description&gt;
          ${marketplace.metadata.description}
        &lt;/description&gt;
        &lt;build_id&gt;${sequential.build.id}&lt;/build_id&gt;
        &lt;min_parent_version&gt;${marketplace.metadata.min_parent_version}&lt;/min_parent_version&gt;
        &lt;development_stage&gt;
          &lt;lane&gt;${marketplace.metadata.development_stage.lane}&lt;/lane&gt;
          &lt;phase&gt;${marketplace.metadata.development_stage.phase}&lt;/phase&gt;
        &lt;/development_stage&gt;
      &lt;/version&gt;</echo>

  </target>

  <!-- =================
         Legacy Compat
       ================= -->
  <target name="resolve-legacy" depends="resolve-init">
    <ivy:resolve file="ivy.xml" conf="legacy" />
    <ivy:retrieve conf="legacy" pattern="${lib.dir}/[module]-[revision](-[classifier]).[ext]" />
  </target>
  <target name="dist-legacy" depends="clean,resolve-legacy,jar,dist-plugin"/>

  <!-- ================= -->

  <!--====================================================================
              dist-samples

              Creates a distribution of this project's samples
      ====================================================================-->
  <target name="dist-samples" depends="init">

    <mkdir dir="${samples.stage.dir}"/>

    <!-- copy samples -->
    <copy todir="${samples.stage.dir}/bi-developers" overwrite="true" >
      <fileset dir="solution/bi-developers"></fileset>
    </copy>

    <replace file="${samples.stage.dir}/bi-developers/${plugin.name}/template.html" token="@@VERSION@@" value="${project.revision}"/>

    <zip zipfile="${dist.dir}/${plugin.samples.zipfile}"
         basedir="${samples.stage.dir}/bi-developers"
         includes="**/*"
         excludes="**/Thumbs.db"
         />
  </target>


  <!--=======================================================================
              install-plugin

              Installs the plugin locally
              ====================================================================-->
  <target name="install-plugin" depends="clean, jar, dist-plugin,dist-samples" description="Installs the plugin locally">

    <fail message="plugin.local.install.solutions.dir not set - cannot copy"
          unless="plugin.local.install.solutions.dir"/>

    <delete dir="${plugin.local.install.solutions.dir}/system/${plugin.name}"/>
    <copy todir="${plugin.local.install.solutions.dir}/system/${plugin.name}">
      <fileset dir="${stage.dir}/${plugin.name}">
        <include name="**/*"/>
      </fileset>
    </copy>

    <!-- Copy samples -->
    <copy todir="${plugin.local.install.solutions.dir}/plugin-samples">
      <fileset dir="${samples.stage.dir}/bi-developers/">
        <include name="**/*" />
      </fileset>
    </copy>
  </target>

  <!--=======================================================================
    run-test (CDA)
    ====================================================================-->
  <target name="run-test" depends="jar" description="Runs a test">

    <java classname="pt.webdetails.cda.CdaExecutor">
      <classpath>
        <pathelement  path="${dist.dir}/${ivy.artifact.id}-${project.revision}.jar"/>
        <pathelement  path="${resource.dir}"/>
	<pathelement  path="${base.resource.dir}"/>
        <fileset dir="lib">
          <include name="**/*.jar"/>
        </fileset>

      </classpath>
    </java>


  </target>


  <!--=======================================================================
          publish-pentaho-nojar (override)

          Publishes the jar and plugin zip package to the Maven repository
          ====================================================================-->
  <target name="publish-nojar"
          depends="install-antcontrib,create-pom,ivy.deliver, subfloor.publish-nojar">

    <ivy:makepom ivyfile="package-ivy-plugin.xml" pomfile="plugin-pom.xml"/>
    <ivy:makepom ivyfile="package-ivy-plugin.xml" pomfile="samples-pom.xml"/>
    <ivy:makepom ivyfile="package-ivy-plugin.xml" pomfile="disabled-pom.xml"/>    

    <replace file="plugin-pom.xml" token="jar" value="zip"/>
    <replace file="plugin-pom.xml" token="%artifact-name%" value="${plugin.artifact.id}"/>
    <antcall target="maven-publish-artifact">
      <param name="publish.pomFile" value="plugin-pom.xml"/>
      <param name="publish.file" value="${dist.dir}/${plugin.zipfile}"/>
    </antcall>

    <replace file="samples-pom.xml" token="jar" value="zip"/>
    <replace file="samples-pom.xml" token="%artifact-name%" value="${plugin.artifact.id}-samples"/>
    <antcall target="maven-publish-artifact">
      <param name="publish.pomFile" value="samples-pom.xml"/>
      <param name="publish.file" value="${dist.dir}/${plugin.samples.zipfile}"/>
    </antcall>
    
    <replace file="disabled-pom.xml" token="jar" value="zip"/>
    <replace file="disabled-pom.xml" token="%artifact-name%" value="${plugin.artifact.id}-disabled"/>

    <antcall target="maven-publish-artifact">
        <param name="publish.pomFile" value="disabled-pom.xml" />
        <param name="publish.file" value="${dist.dir}/${plugin.disabled.zipfile}" />
    </antcall>       
    

  </target>


</project>
